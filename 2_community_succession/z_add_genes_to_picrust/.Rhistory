library(phyloseq)
library(microbiome)
library(philr)
library(ape)
library(metacoder)
library("data.table")
library(vegan)
library(tidyr)
library("plyr")
library(gridExtra)
options(warn = -1)
library(randomcoloR)
library(DESeq2)
folder <- '/Users/robynwright/Documents/OneDrive/Langille_Lab_postdoc/Acid_rain_recovery/'
asv_table <- read.csv(paste(folder, "exports/feature_table_R.csv", sep="")) #read in table from file
sampledata <- read.csv(paste(folder, "exports/metadata_R.csv", sep="")) #read in the metadata table
phy_tree <- read_tree(paste(folder, "exports/tree.nwk", sep='')) #read in the phylogenetic tree
taxonomy = asv_table[, c(1, 22)] #take only the OTU ID and taxonomy column to a new table
asv_table = asv_table[, 1:21] #take the OTU ID and the other columns to be the ASV table
asv_table_num = data.matrix(asv_table[,2:21]) #convert the ASV table to a numeric matric
rownames(asv_table_num) = asv_table[,1] #give the matrix row names
asv_table = as.matrix(asv_table_num) #convert it to a matrix
taxonomy <- separate(data = taxonomy, col = taxonomy, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = "\\;") #separate the taxonomy table so each phylogenetic level is its own column
taxmat <- taxonomy[,-1] #remove the OTU ID column from the taxonomy table
rownames(taxmat) <- taxonomy[,1] #and now give the taxonomy table the OTU IDs as row names
samples <- sampledata[, 2:5] #get the metadata columns
rownames(samples) = sampledata[,1] #and add the sample names as row names
samples = data.frame(samples, stringsAsFactors = FALSE) #convert this to a data frame
#convert these to phyloseq objects
ASV = otu_table(asv_table, taxa_are_rows = TRUE)
TAX = tax_table(taxmat)
SAMPLE = sample_data(samples)
taxa_names(TAX) <- taxonomy[,1]
physeq = phyloseq(ASV,phy_tree,TAX,SAMPLE)
physeq_rare <- rarefy_even_depth(physeq, sample.size = min(sample_sums(physeq)), replace = TRUE, trimOTUs = TRUE, verbose = TRUE) #rarefy to the lowest sample depth
physeq_clr <- microbiome::transform(physeq, "clr") #convert to CLR
physeq_relabun  <- transform_sample_counts(physeq, function(x) (x / sum(x))*100) #convert to relative abundance
asvs = otu_table(physeq_clr)
tax = data.frame(tax_table(physeq_clr))
tax_new = apply(tax, MARGIN=c(1,2), function(x) (strsplit(x, "__")[[1]][2]))
tax_new_coll = data.frame(tax_new)
tax_new_coll$lineage = paste(tax_new_coll$ta1, tax_new_coll$ta2, tax_new_coll$ta3, tax_new_coll$ta4, tax_new_coll$ta5, tax_new_coll$ta6, tax_new_coll$ta7, sep=";")
tax_new_coll = tax_new_coll[c("lineage")]
asv_tax = merge(asvs, tax_new_coll, by="row.names")
x <- parse_phyloseq(physeq_clr)
obj <- parse_tax_data(asv_tax, class_cols = "lineage", class_sep = ";")
obj$data$tax_data <- calc_obs_props(obj, "tax_data")
obj$data$tax_abund <- calc_taxon_abund(obj, "tax_data")
obj$data$sample_data = x$data$sample_data
set.seed(1)
cn = colnames(obj$data$tax_data)
rn = rownames(obj$data$sample_data)
keeping = c()
group = c()
for (i in 2:length(cn)) {
for (j in 1:length(rn)) {
if (obj$data$sample_data$sample_id[j] == cn[i]) {
if (obj$data$sample_data$Location[j] == "Site4") {
keeping = c(keeping, cn[i])
group = c(group, obj$data$sample_data$Treatment[j])
}
}
}
}
obj$data$diff_table <- compare_groups(obj, dataset = "tax_abund", cols=keeping, groups=group, func=function(x, y) {
log_ratio <- median(x) - median(y)
if (is.nan(log_ratio)) {
log_ratio <- 0
}
list(log2_median_ratio = log_ratio,
median_diff = median(x) - median(y),
mean_diff = mean(x) - mean(y),
wilcox_p_value = wilcox.test(x, y)$p.value)
})
heat_tree(obj, node_label=taxon_names, node_size=n_obs, node_color=log2_median_ratio, layout="davidson-harel", initial_layout="reingold-tilford")
s1 = "Site1"
s2 = "Site2"
obj <- parse_tax_data(asv_tax, class_cols = "lineage", class_sep = ";")
obj$data$tax_data <- calc_obs_props(obj, "tax_data")
obj$data$tax_abund <- calc_taxon_abund(obj, "tax_data")
obj$data$sample_data = x$data$sample_data
set.seed(1)
cn = colnames(obj$data$tax_data)
rn = rownames(obj$data$sample_data)
keeping = c()
group = c()
for (i in 2:length(cn)) {
for (j in 1:length(rn)) {
if (obj$data$sample_data$sample_id[j] == cn[i]) {
if (obj$data$sample_data$Location[j] == s1) {
keeping = c(keeping, cn[i])
group = c(group, obj$data$sample_data$Location[j])
} else if (obj$data$sample_data$Location[j] == s2) {
keeping = c(keeping, cn[i])
group = c(group, obj$data$sample_data$Location[j])
}
}
}
}
obj$data$diff_table <- compare_groups(obj, dataset = "tax_abund", cols=keeping, groups=group, func=function(x, y) {
log_ratio <- median(x) - median(y)
if (is.nan(log_ratio)) {
log_ratio <- 0
}
list(log2_median_ratio = log_ratio,
median_diff = median(x) - median(y),
mean_diff = mean(x) - mean(y),
wilcox_p_value = wilcox.test(x, y)$p.value)
})
heat_tree(obj, node_label=taxon_names, node_size=n_obs, node_color=log2_median_ratio, layout="davidson-harel", initial_layout="reingold-tilford")
obj$data$diff_table$wilcox_p_value <- p.adjust(obj$data$diff_table$wilcox_p_value, method="fdr")
range(obj$data$diff_table$wilcox_p_value, finite=TRUE)
obj$data$diff_table$log2_median_ratio[obj$data$diff_table$wilcox_p_value > 0.05] <- 0
heat_tree(obj, node_label=taxon_names, node_size=n_obs, node_color=log2_median_ratio, layout="davidson-harel", initial_layout="reingold-tilford")
library(reticulate)
library(kableExtra)
library(knitr)
library(phyloseq)
library(microbiome)
library(philr)
library(ape)
library(metacoder)
library("data.table")
library(vegan)
library(tidyr)
library("plyr")
library(gridExtra)
options(warn = -1)
library(randomcoloR)
library(DESeq2)
folder <- '/Users/robynwright/Documents/OneDrive/Langille_Lab_postdoc/Acid_rain_recovery/'
library(reticulate)
library(kableExtra)
library(knitr)
library(phyloseq)
library(microbiome)
library(philr)
library(ape)
library(metacoder)
library("data.table")
library(vegan)
library(tidyr)
library("plyr")
library(gridExtra)
options(warn = -1)
library(randomcoloR)
library(DESeq2)
folder <- '/Users/robynwright/Documents/OneDrive/Langille_Lab_postdoc/Acid_rain_recovery/'
library(reticulate)
library(kableExtra)
library(knitr)
library(phyloseq)
library(microbiome)
library(philr)
library(ape)
library(metacoder)
library("data.table")
library(vegan)
library(tidyr)
library("plyr")
library(gridExtra)
options(warn = -1)
library(randomcoloR)
library(DESeq2)
folder <- '/Users/robynwright/Documents/OneDrive/Langille_Lab_postdoc/Acid_rain_recovery/'
asv_table <- read.csv(paste(folder, "exports/feature_table_R.csv", sep="")) #read in table from file
sampledata <- read.csv(paste(folder, "exports/metadata_R.csv", sep="")) #read in the metadata table
phy_tree <- read_tree(paste(folder, "exports/tree.nwk", sep='')) #read in the phylogenetic tree
taxonomy = asv_table[, c(1, 22)] #take only the OTU ID and taxonomy column to a new table
asv_table = asv_table[, 1:21] #take the OTU ID and the other columns to be the ASV table
asv_table_num = data.matrix(asv_table[,2:21]) #convert the ASV table to a numeric matric
rownames(asv_table_num) = asv_table[,1] #give the matrix row names
asv_table = as.matrix(asv_table_num) #convert it to a matrix
taxonomy <- separate(data = taxonomy, col = taxonomy, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = "\\;") #separate the taxonomy table so each phylogenetic level is its own column
taxmat <- taxonomy[,-1] #remove the OTU ID column from the taxonomy table
rownames(taxmat) <- taxonomy[,1] #and now give the taxonomy table the OTU IDs as row names
samples <- sampledata[, 2:5] #get the metadata columns
rownames(samples) = sampledata[,1] #and add the sample names as row names
samples = data.frame(samples, stringsAsFactors = FALSE) #convert this to a data frame
#convert these to phyloseq objects
ASV = otu_table(asv_table, taxa_are_rows = TRUE)
TAX = tax_table(taxmat)
SAMPLE = sample_data(samples)
taxa_names(TAX) <- taxonomy[,1]
physeq = phyloseq(ASV,phy_tree,TAX,SAMPLE)
physeq_rare <- rarefy_even_depth(physeq, sample.size = min(sample_sums(physeq)), replace = TRUE, trimOTUs = TRUE, verbose = TRUE) #rarefy to the lowest sample depth
physeq_clr <- microbiome::transform(physeq, "clr") #convert to CLR
physeq_relabun  <- transform_sample_counts(physeq, function(x) (x / sum(x))*100) #convert to relative abundance
rarecurve(t(otu_table(physeq)), step=50, cex=0.5)
plot_richness(physeq, measures=c("Observed", "Chao1", "Simpson", "Shannon"))
plot_richness(physeq, x="Location", measures=c("Observed", "Chao1", "Simpson", "Shannon")) + geom_boxplot()
plot_richness(physeq, x="Treatment", measures=c("Observed", "Chao1", "Simpson", "Shannon")) + geom_boxplot()
plot_richness(physeq_rare, measures=c("Observed", "Chao1", "Simpson", "Shannon"))
plot_richness(physeq_rare, x="Location", measures=c("Observed", "Chao1", "Simpson", "Shannon")) + geom_boxplot()
plot_richness(physeq_rare, x="Treatment", measures=c("Observed", "Chao1", "Simpson", "Shannon")) + geom_boxplot()
ps = physeq
ps.ord <- ordinate(ps, "PCoA", "bray")
plot_ordination(ps, ps.ord, type="samples", color="Treatment", shape="Location")
distance <- phyloseq::distance(ps, method="bray", weighted=F)
adonis(distance ~ sample_data(ps)$Treatment)
adonis(distance ~ sample_data(ps)$Location)
adonis(distance ~ sample_data(ps)$Location2)
ps = physeq_rare
ps.ord <- ordinate(ps, "PCoA", "bray")
plot_ordination(ps, ps.ord, type="samples", color="Treatment", shape="Location")
distance <- phyloseq::distance(ps, method="bray", weighted=F)
adonis(distance ~ sample_data(ps)$Treatment)
adonis(distance ~ sample_data(ps)$Location)
adonis(distance ~ sample_data(ps)$Location2)
ps = physeq_relabun
ps.ord <- ordinate(ps, "PCoA", "bray")
plot_ordination(ps, ps.ord, type="samples", color="Treatment", shape="Location")
distance <- phyloseq::distance(ps, method="bray", weighted=F)
adonis(distance ~ sample_data(ps)$Treatment)
adonis(distance ~ sample_data(ps)$Location)
adonis(distance ~ sample_data(ps)$Location2)
ps = physeq
ps.ord.w <- ordinate(ps, "PCoA", "unifrac", weighted=TRUE)
w <- plot_ordination(ps, ps.ord.w, type="samples", color="Treatment", shape="Location", title="Weighted Unifrac")
ps.ord.uw <- ordinate(ps, "PCoA", "unifrac", weighted=FALSE)
uw <- plot_ordination(ps, ps.ord.uw, type="samples", color="Treatment", shape="Location", title="Unweighted Unifrac")
grid.arrange(w, uw, nrow = 1)
distance <- phyloseq::distance(ps, method="unifrac", weighted=T)
adonis(distance ~ sample_data(ps)$Treatment)
adonis(distance ~ sample_data(ps)$Location)
adonis(distance ~ sample_data(ps)$Location2)
distance <- phyloseq::distance(ps, method="unifrac", weighted=F)
adonis(distance ~ sample_data(ps)$Treatment)
adonis(distance ~ sample_data(ps)$Location)
adonis(distance ~ sample_data(ps)$Location2)
ps = physeq_rare
ps.ord.w <- ordinate(ps, "PCoA", "unifrac", weighted=TRUE)
w <- plot_ordination(ps, ps.ord.w, type="samples", color="Treatment", shape="Location", title="Weighted Unifrac")
ps.ord.uw <- ordinate(ps, "PCoA", "unifrac", weighted=FALSE)
uw <- plot_ordination(ps, ps.ord.uw, type="samples", color="Treatment", shape="Location", title="Unweighted Unifrac")
grid.arrange(w, uw, nrow = 1)
distance <- phyloseq::distance(ps, method="unifrac", weighted=T)
adonis(distance ~ sample_data(ps)$Treatment)
adonis(distance ~ sample_data(ps)$Location)
adonis(distance ~ sample_data(ps)$Location2)
distance <- phyloseq::distance(ps, method="unifrac", weighted=F)
adonis(distance ~ sample_data(ps)$Treatment)
adonis(distance ~ sample_data(ps)$Location)
adonis(distance ~ sample_data(ps)$Location2)
ps = physeq_relabun
ps.ord.w <- ordinate(ps, "PCoA", "unifrac", weighted=TRUE)
w <- plot_ordination(ps, ps.ord.w, type="samples", color="Treatment", shape="Location", title="Weighted Unifrac")
ps.ord.uw <- ordinate(ps, "PCoA", "unifrac", weighted=FALSE)
uw <- plot_ordination(ps, ps.ord.uw, type="samples", color="Treatment", shape="Location", title="Unweighted Unifrac")
grid.arrange(w, uw, nrow = 1)
distance <- phyloseq::distance(ps, method="unifrac", weighted=T)
adonis(distance ~ sample_data(ps)$Treatment)
adonis(distance ~ sample_data(ps)$Location)
adonis(distance ~ sample_data(ps)$Location2)
distance <- phyloseq::distance(ps, method="unifrac", weighted=F)
adonis(distance ~ sample_data(ps)$Treatment)
adonis(distance ~ sample_data(ps)$Location)
adonis(distance ~ sample_data(ps)$Location2)
ps = physeq_clr
ps.ord <- ordinate(ps, "PCoA", "euclidean")
plot_ordination(ps, ps.ord, type="samples", color="Treatment", shape="Location")
distance <- phyloseq::distance(ps, method="euclidean", weighted=F)
adonis(distance ~ sample_data(ps)$Treatment)
adonis(distance ~ sample_data(ps)$Location)
adonis(distance ~ sample_data(ps)$Location2)
physeq_philr = physeq
physeq_philr <- transform_sample_counts(physeq_philr, function(x) x+1)
phy_tree(physeq_philr) <- makeNodeLabel(phy_tree(physeq_philr), method="number", prefix='n')
otu.table <- t(otu_table(physeq_philr))
tree <- phy_tree(physeq_philr)
metadata <- sample_data(physeq_philr)
tax <- tax_table(physeq_philr)
ps = physeq_philr
physeq.philr <- philr(otu.table, tree, part.weights='enorm.x.gm.counts', ilr.weights='blw.sqrt')
philr.dist <- dist(physeq.philr, method="euclidean")
ps.ord <- ordinate(physeq, 'PCoA', distance=philr.dist)
plot_ordination(ps, ps.ord, type="samples", color="Treatment", shape="Location")
adonis(philr.dist ~ sample_data(ps)$Treatment)
adonis(philr.dist ~ sample_data(ps)$Location)
adonis(philr.dist ~ sample_data(ps)$Location2)
palette = distinctColorPalette(30)
rnk = "ta2"
ps.rank = tax_glom(physeq_relabun, taxrank=rnk, NArm=FALSE)
rank.sum = tapply(taxa_sums(ps.rank), tax_table(ps.rank)[, rnk], sum, na.rm=TRUE)
top30 = names(sort(rank.sum, TRUE))[1:30]
ps.rank = prune_taxa((tax_table(ps.rank)[, rnk] %in% top30), ps.rank)
plot_bar(ps.rank, fill=rnk) + facet_wrap(c(~Treatment, ~Location), scales="free_x", nrow=1) + theme(legend.text=element_text(size=5), legend.key.size = unit(0.3, "cm")) + guides(fill=guide_legend(ncol=1)) + scale_fill_manual(values=palette)
rnk = "ta3"
ps.rank = tax_glom(physeq_relabun, taxrank=rnk, NArm=FALSE)
rank.sum = tapply(taxa_sums(ps.rank), tax_table(ps.rank)[, rnk], sum, na.rm=TRUE)
top30 = names(sort(rank.sum, TRUE))[1:30]
ps.rank = prune_taxa((tax_table(ps.rank)[, rnk] %in% top30), ps.rank)
plot_bar(ps.rank, fill=rnk) + facet_wrap(c(~Treatment, ~Location), scales="free_x", nrow=1) + theme(legend.text=element_text(size=5), legend.key.size = unit(0.3, "cm")) + guides(fill=guide_legend(ncol=1)) + scale_fill_manual(values=palette)
ps = physeq_relabun
top50 = names(sort(taxa_sums(ps), TRUE))[1:50]
ps_trim = prune_taxa(top50, ps)
plot_tree(ps_trim, color="Location", label.tips = "ta5", ladderize="left", size="Abundance")
ps = physeq_relabun
top50 = names(sort(taxa_sums(ps), TRUE))[1:50]
ps_trim = prune_taxa(top50, ps)
plot_tree(ps_trim, color="Treatment", label.tips = "ta5", ladderize="left", size="Abundance")
library(microbiome)
library(phyloseq)
ps = physeq_clr
top75 = names(sort(taxa_sums(ps), TRUE))[1:75]
ps = prune_taxa(top75, ps)
tree = phy_tree(ps)
asv = otu_table(ps)
tax = tax_table(ps)
detach("package:microbiome", unload=TRUE, force=TRUE)
detach("package:phyloseq", unload=TRUE, force=TRUE)
library("ggtree")
asv_df = as.data.frame(asv)
tax_df = as.data.frame(tax, stringsAsFactors=F)
data_plot = asv_df[,sample_names(ps)]
rns <- rownames(samples)
locs <- samples[["Location2"]]
cn <- colnames(data_plot)
rename = c()
for (a in 1:length(cn)) {
for (b in 1:length(rns)) {
if (cn[a] == rns[b]) {
rename = c(rename, as.character(locs[b]))
}
}
}
colnames(data_plot) = rename
data_mean <- as.data.frame(sapply(unique(names(data_plot)), function(col) rowMeans(data_plot[names(data_plot) == col])))
asv_tax_full <- merge(asv_df, tax_df, by="row.names")
asv_tax <- asv_tax_full[,c("Row.names", "ta1", "ta2", "ta3", "ta4", "ta5", "ta6", "ta7")]
levels = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
colnames(asv_tax) <- c("label", levels)
levels = levels[7:1]
labels = tree$tip.label
species_name = c()
for (i in 1:length(labels)) {
for (j in 1:length(asv_tax$label)) {
if (labels[i] == asv_tax$label[j]) {
if (is.na(asv_tax$Species[j]) == FALSE) {
species_name <- c(species_name, asv_tax$Species[j])
} else if (is.na(asv_tax$Genus[j]) == FALSE) {
species_name <- c(species_name, asv_tax$Genus[j])
} else if (is.na(asv_tax$Family[j]) == FALSE) {
species_name <- c(species_name, asv_tax$Family[j])
} else if (is.na(asv_tax$Order[j]) == FALSE) {
species_name <- c(species_name, asv_tax$Order[j])
} else if (is.na(asv_tax$Class[j]) == FALSE) {
species_name <- c(species_name, asv_tax$Class[j])
} else if (is.na(asv_tax$Phylum[j]) == FALSE) {
species_name <- c(species_name, asv_tax$Phylum[j])
} else {
species_name <- c(species_name, asv_tax$Domain[j])
}
}
}
}
d <- data.frame(label=tree$tip.label, species=species_name)
p <- ggtree(tree, layout="fan", open.angle=15)
p <- gheatmap(p, data_mean, colnames_angle=90, font.size=2, hjust=1, color="black", offset=1.3) + scale_fill_viridis_b()
p <- p %<+% d + geom_tiplab(aes(label=species), parse=F, size=2, align=T, linesize=.12, offset=offset)
p
library(microbiome)
library(phyloseq)
ps = physeq_clr
top75 = names(sort(taxa_sums(ps), TRUE))[1:75]
ps = prune_taxa(top75, ps)
tree = phy_tree(ps)
asv = otu_table(ps)
tax = tax_table(ps)
detach("package:microbiome", unload=TRUE, force=TRUE)
detach("package:phyloseq", unload=TRUE, force=TRUE)
library("ggtree")
asv_df = as.data.frame(asv)
tax_df = as.data.frame(tax, stringsAsFactors=F)
data_plot = asv_df[,sample_names(ps)]
rns <- rownames(samples)
locs <- samples[["Treatment"]]
cn <- colnames(data_plot)
rename = c()
for (a in 1:length(cn)) {
for (b in 1:length(rns)) {
if (cn[a] == rns[b]) {
rename = c(rename, as.character(locs[b]))
}
}
}
colnames(data_plot) = rename
data_mean <- as.data.frame(sapply(unique(names(data_plot)), function(col) rowMeans(data_plot[names(data_plot) == col])))
asv_tax_full <- merge(asv_df, tax_df, by="row.names")
asv_tax <- asv_tax_full[,c("Row.names", "ta1", "ta2", "ta3", "ta4", "ta5", "ta6", "ta7")]
levels = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
colnames(asv_tax) <- c("label", levels)
levels = levels[7:1]
labels = tree$tip.label
species_name = c()
for (i in 1:length(labels)) {
for (j in 1:length(asv_tax$label)) {
if (labels[i] == asv_tax$label[j]) {
if (is.na(asv_tax$Species[j]) == FALSE) {
species_name <- c(species_name, asv_tax$Species[j])
} else if (is.na(asv_tax$Genus[j]) == FALSE) {
species_name <- c(species_name, asv_tax$Genus[j])
} else if (is.na(asv_tax$Family[j]) == FALSE) {
species_name <- c(species_name, asv_tax$Family[j])
} else if (is.na(asv_tax$Order[j]) == FALSE) {
species_name <- c(species_name, asv_tax$Order[j])
} else if (is.na(asv_tax$Class[j]) == FALSE) {
species_name <- c(species_name, asv_tax$Class[j])
} else if (is.na(asv_tax$Phylum[j]) == FALSE) {
species_name <- c(species_name, asv_tax$Phylum[j])
} else {
species_name <- c(species_name, asv_tax$Domain[j])
}
}
}
}
d <- data.frame(label=tree$tip.label, species=species_name)
p <- ggtree(tree, layout="fan", open.angle=15)
p <- gheatmap(p, data_mean, colnames_angle=90, font.size=2, hjust=1, color="black", offset=1.3) + scale_fill_viridis_b()
p <- p %<+% d + geom_tiplab(aes(label=species), parse=F, size=2, align=T, linesize=.12, offset=offset)
p
p <- ggtree(tree, layout="fan", open.angle=15)
p
p <- gheatmap(p, data_mean, colnames_angle=90, font.size=2, hjust=1, color="black", offset=1.3) + scale_fill_viridis_b()
p
p <- p %<+% d + geom_tiplab(aes(label=species), parse=F, size=2, align=T, linesize=.12, offset=offset)
p
d
p
p <- p %<+% d + geom_tiplab(parse=F, size=2, align=T, linesize=.12, offset=offset)
p
p <- ggtree(tree, layout="fan", open.angle=15)
p <- gheatmap(p, data_mean, colnames_angle=90, font.size=2, hjust=1, color="black", offset=1.3) + scale_fill_viridis_b()
p <- p %<+% d + geom_tiplab(parse=F, size=2, align=T, linesize=.12, offset=offset)
p
p
p <- ggtree(tree, layout="fan", open.angle=15)
p <- gheatmap(p, data_mean, colnames_angle=90, font.size=2, hjust=1, color="black", offset=1.3) + scale_fill_viridis_b()
p
p <- p + geom_tiplab
p <- p + geom_tiplab()
p
p <- p + geom_tiplab(aes(label=species))
p
p <- ggtree(tree, layout="fan", open.angle=15)
p <- gheatmap(p, data_mean, colnames_angle=90, font.size=2, hjust=1, color="black", offset=1.3) + scale_fill_viridis_b()
p <- p + geom_tiplab(aes(label=species))
p
species
d$species
p <- p + geom_tiplab(aes(d$species), parse=F, size=2, align=T, linesize=.12, offset=offset)
p
species = d$species
p <- p + geom_tiplab(aes(d$species), parse=F, size=2, align=T, linesize=.12, offset=offset)
p
?geom_tiplab
p <- ggtree(tree, layout="fan", open.angle=15)
p <- gheatmap(p, data_mean, colnames_angle=90, font.size=2, hjust=1, color="black", offset=1.3) + scale_fill_viridis_b()
p <- p %<+% d + geom_tiplab(aes(label=species), parse=F, size=2, align=T, linesize=.12, offset=offset)
p
options(warn = -1)
library(reticulate)
library(kableExtra)
library(knitr)
library(phyloseq)
library(microbiome)
library(philr)
library(ape)
library(metacoder)
library("data.table")
library(vegan)
library(tidyr)
library("plyr")
library(gridExtra)
library(randomcoloR)
library(DESeq2)
folder <- '/Users/robynwright/Documents/OneDrive/Github/PET-Plastisphere/3_isolates/e_global_distribution/'
options(warn = -1)
library(reticulate)
library(kableExtra)
library(knitr)
library(phyloseq)
library(microbiome)
library(philr)
library(ape)
library(metacoder)
library("data.table")
library(vegan)
library(tidyr)
library("plyr")
library(gridExtra)
library(randomcoloR)
library(DESeq2)
folder <- '/Users/robynwright/Documents/OneDrive/Github/PET-Plastisphere/3_isolates/e_global_distribution/'
options(warn = -1)
library(reticulate)
library(kableExtra)
library(knitr)
library(ape)
tree <- read_tree(paste(py$folder_results, "picrust_out/intermediate/place_seqs/epa_out/epa_result_parsed.jplace", sep=''))
options(warn = -1)
library(reticulate)
library(kableExtra)
library(knitr)
library(phyloseq)
library(ape)
tree <- read_tree(paste(py$folder_results, "picrust_out/intermediate/place_seqs/epa_out/epa_result_parsed.jplace", sep=''))
PatristicDistMatrix<-cophenetic.phylo(tree)
write.table(PatristicDistMatrix,file=paste(py$folder, "ASV_distance.csv", sep=''))
head(PatristicDistMatrix)
head(PatristicDistMatrix)
options(warn = -1)
